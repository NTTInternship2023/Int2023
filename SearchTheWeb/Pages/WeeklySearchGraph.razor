@page "/weeklysearchgraph"
@using ChartJs.Blazor.BarChart


<Chart Config="_barConfig"></Chart>

@code {

    //Get Last Week dates
    DateTime LastWeekStartDate { get; set; }
    DateTime LastWeekEndDate { get; set; }


    private BarConfig _barConfig = new();

    public class SearchData
    {
        public string SearchTerm { get; set; } = string.Empty;
        public int SearchCount { get; set; }
    }

    private readonly SearchData[] _searchDatas =
    {
        new() { SearchTerm = "C#", SearchCount = 160 },
        new() { SearchTerm = "Java", SearchCount = 150 },
        new() { SearchTerm = "JavaScript", SearchCount = 100 },
        new() { SearchTerm = "Python", SearchCount = 50 },
        new() { SearchTerm = "C++", SearchCount = 25 },
        new() { SearchTerm = "COBOL", SearchCount = 25 },
        new() { SearchTerm = "F#", SearchCount = 20 },
        new() { SearchTerm = "Go", SearchCount = 15 },
        new() { SearchTerm = "Rust", SearchCount = 10 },
        new() { SearchTerm = "TypeScript", SearchCount = 5 },
    };


    protected override void OnInitialized()
    {
        CalculateLastWeekDates();
        ConfigureBarConfig();
    }

    private void ConfigureBarConfig()
    {
        _barConfig = new BarConfig();

        _barConfig.Options = new BarOptions
        {
            Responsive = true,
            Title = new OptionsTitle
            {
                Display = true,
                Text = $"Last Week Search Terms ({LastWeekStartDate.ToShortDateString()} - {LastWeekEndDate.ToShortDateString()})"
            }
        };

        var dataset = new BarDataset<int>();
        //Do not show legend
        _barConfig.Options.Legend = new Legend
        {
            Display = false
        };
        foreach (var item in _searchDatas)
        {
            
            _barConfig.Data.Labels.Add(item.SearchTerm);
            dataset.Add(item.SearchCount);
        }
        dataset.BackgroundColor = new[]
        {
            "#FF6384", // Red
            "#36A2EB", // Blue
            "#FFCE56", // Yellow
            "#4BC0C0", // Green
            "#9966FF", // Purple
            "#FF9F40", // Orange
            "#C9CBCF", // Gray
            "#FF5733", // Coral
            "#00FF00", // Lime Green
            "#FF1493", // Deep Pink
        };
        _barConfig.Data.Datasets.Add(dataset);
    }


    private void CalculateLastWeekDates()
    {
        var currentDate = DateTime.Now;

        var firstDayOfWeek = currentDate.AddDays(-(int)currentDate.DayOfWeek + 1);
        var lastDayOfWeek = firstDayOfWeek.AddDays(6);

        LastWeekStartDate = firstDayOfWeek.AddDays(-7);

        LastWeekEndDate = lastDayOfWeek.AddDays(-7);
    }

}