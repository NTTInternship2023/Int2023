@page "/weeklysearchgraph"
@using System.Globalization
@using ChartJs.Blazor.BarChart
@using ChartJs.Blazor.Common
@using System.Text.Json
@using ChartJs.Blazor.BarChart.Axes
@using ChartJs.Blazor.Common.Axes

@inject HttpClient HttpClient

@if (_isLoading)
{
    <p class="text-center">Loading...</p>
}
else
{
    @if (_searchDatas.Count > 0)
    {
        <div class="row">
            <div class="col-md-12">
                <div class="card">
                    <div class="card-body">
                        <Chart Config="_barConfig"></Chart>
                    </div>
                </div>
            </div>
        </div>
    }
    else
    {
        <div class="row">
            <div class="col-md-12">
                <div class="card">
                    <div class="card-body">
                        <p class="text-center">No data found</p>
                    </div>
                </div>
            </div>
        </div>
    }
}

@code {

    //Get Current Week dates
    DateTime CurrentWeekStartDate { get; set; }
    DateTime CurrentWeekEndDate { get; set; }
    static readonly CultureInfo _ci = CultureInfo.CurrentCulture;
    readonly int _currentWeekNumber = _ci.Calendar.GetWeekOfYear(DateTime.Now, CalendarWeekRule.FirstFourDayWeek, DayOfWeek.Monday);
    

    bool _isLoading = true;
    private readonly BarConfig _barConfig = new();

    private class SearchData
    {
        public string keyword { get; set; } = string.Empty;
        public int totalSearches { get; set; }
        public int weekNumber { get; set; }
    }
    private List<SearchData> _searchDatas = new();

    protected override async Task OnInitializedAsync()
    {
        await GetData();
        _isLoading = false;
        CalculateCurrentWeekDates();
        ConfigureBarConfig();
    }

    private async Task GetData()
    {
        //Get all data from Endpoint
        var request = new HttpRequestMessage(HttpMethod.Get, "https://localhost:7194/Logger/SearchAction");
        var response = await HttpClient.SendAsync(request);
        if (response.IsSuccessStatusCode)
        {
            var responseContent = await response.Content.ReadAsStringAsync();
            var searchDatas = JsonSerializer.Deserialize<List<SearchData>>(responseContent);
            _searchDatas = searchDatas!;
        }

        _searchDatas = _searchDatas.Where(x => x.weekNumber == _currentWeekNumber).ToList();
        _searchDatas = _searchDatas.Take(10).ToList();
    }

    private void ConfigureBarConfig()
    {
        _barConfig.Options = new BarOptions
        {
            Responsive = true,
            Title = new OptionsTitle
            {
                Display = true,
                Text = $"Current week's most searched movies ({CurrentWeekStartDate.ToShortDateString()} - {CurrentWeekEndDate.ToShortDateString()})"
            },
            Scales = new BarScales
            {
                XAxes = new List<CartesianAxis>
                {
                    new BarCategoryAxis
                    {
                        Stacked = true
                    }
                },
                YAxes = new List<CartesianAxis>
                {
                    new BarLinearCartesianAxis
                    {
                        Stacked = true
                    }
                }
            }
        };

        var dataset = new BarDataset<int>();

        _barConfig.Options.Legend = new Legend
        {
            Display = false
        };
        foreach (var item in _searchDatas)
        {
            _barConfig.Data.Labels.Add(item.keyword);
            dataset.Add(item.totalSearches);
        }
        dataset.BackgroundColor = new[]
        {
            "#FF6384", // Red
            "#36A2EB", // Blue
            "#FFCE56", // Yellow
            "#4BC0C0", // Green
            "#9966FF", // Purple
            "#FF9F40", // Orange
            "#C9CBCF", // Gray
            "#FF5733", // Coral
            "#00FF00", // Lime Green
            "#FF1493" // Deep Pink
        };
        _barConfig.Data.Datasets.Add(dataset);
    }

    //Function to get the current start and end dates of the week
    //The week starts on Monday and ends on Sunday
    private void CalculateCurrentWeekDates()
    {
        var currentDate = DateTime.Now;
        var currentDayOfWeek = (int)currentDate.DayOfWeek;
        var currentWeekStartDate = currentDate.AddDays(-currentDayOfWeek + 1);
        var currentWeekEndDate = currentWeekStartDate.AddDays(6);
        CurrentWeekStartDate = currentWeekStartDate;
        CurrentWeekEndDate = currentWeekEndDate;
    }

}