@page "/weeklysearchgraph"
@using ChartJs.Blazor.BarChart
@using ChartJs.Blazor.Common

@inject HttpClient HttpClient

<Chart Config="_barConfig"></Chart>

@code {

    //Get Last Week dates
    DateTime CurrentWeekStartDate { get; set; }
    DateTime CurrentWeekEndDate { get; set; }


    private BarConfig _barConfig = new();

    public class SearchData
    {
        public string keyword { get; set; } = string.Empty;
        public int totalSearches { get; set; }
        public int weekNumber { get; set; }
    }

    private List<SearchData> _searchDatas = new List<SearchData>();

    private async Task GetData()
    {
        var request = new HttpRequestMessage(HttpMethod.Get, "https://localhost:7194/Logger/SearchAction?limit=10");
        var response = await HttpClient.SendAsync(request);
        if (response.IsSuccessStatusCode)
        {
            var responseContent = await response.Content.ReadAsStringAsync();
            var searchDatas = System.Text.Json.JsonSerializer.Deserialize<List<SearchData>>(responseContent);
            _searchDatas = searchDatas;
        }
        
        //Get Last Week Data
        var maxWeekNumber = _searchDatas.Max(x => x.weekNumber);
        _searchDatas = _searchDatas.Where(x => x.weekNumber == maxWeekNumber).ToList();
        
        foreach (var data in _searchDatas)
        {
            Console.WriteLine($"{data.keyword}  {data.totalSearches}   {data.weekNumber}");
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await GetData();
        CalculateCurrentWeekDates();
        ConfigureBarConfig();
    }

    private void ConfigureBarConfig()
    {
        _barConfig.Options = new BarOptions
        {
            Responsive = true,
            Title = new OptionsTitle
            {
                Display = true,
                Text = $"Last Week Search Terms ({CurrentWeekStartDate.ToShortDateString()} - {CurrentWeekEndDate.ToShortDateString()})"
            }
        };

        var dataset = new BarDataset<int>();
        
        _barConfig.Options.Legend = new Legend
        {
            Display = false
        };
        foreach (var item in _searchDatas)
        {
            _barConfig.Data.Labels.Add(item.keyword);
            dataset.Add(item.totalSearches);
        }
        dataset.BackgroundColor = new[]
        {
            "#FF6384", // Red
            "#36A2EB", // Blue
            "#FFCE56", // Yellow
            "#4BC0C0", // Green
            "#9966FF", // Purple
            "#FF9F40", // Orange
            "#C9CBCF", // Gray
            "#FF5733", // Coral
            "#00FF00", // Lime Green
            "#FF1493", // Deep Pink
        };
        _barConfig.Data.Datasets.Add(dataset);
    }

    //Function to get the current start and end dates of the week
    //The week starts on Monday and ends on Sunday
    private void CalculateCurrentWeekDates()
    {
        
        var currentDate = DateTime.Now;
        var currentDayOfWeek = (int)currentDate.DayOfWeek;
        var currentWeekStartDate = currentDate.AddDays(-currentDayOfWeek + 1);
        var currentWeekEndDate = currentWeekStartDate.AddDays(6);
        CurrentWeekStartDate = currentWeekStartDate;
        CurrentWeekEndDate = currentWeekEndDate;
    }

}