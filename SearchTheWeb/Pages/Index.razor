@page "/index"
@using System
@using System.Collections.Generic
@using System.Globalization
@using System.Linq
@using System.Text.Json
@inject HttpClient HttpClient

@namespace SearchTheWeb.Pages.Index

<head>
    <link rel="stylesheet" href="css/index.css" />
</head>

<h1 id = "heading">Simplify IMDB's most searched titles</h1>

<div class="container">
    <div class="word-cloud">
        <div class="word-cloud-container">
            @if (topSearches != null)
            {
                @foreach (var cloudWord in topSearches.Take(10).Select((value, index) => new { Value = value, Index = index }))
                {
                    int baseFontSize = 12;
                    int decreaseFactor = 4;
                    int wordSize = baseFontSize + (10 - cloudWord.Index) * decreaseFactor;

                    int maxAttempts = 100;
                    int attempt = 0;
                    bool collisionDetected;

                    int leftPosition = 0;
                    int topPosition = 0;

                    do
                    {
                        leftPosition = random.Next(0, 100); // Random left position between 0% and 100%
                        topPosition = random.Next(0, 100); // Random top position between 0% and 100%

                        collisionDetected = placedWords != null && placedWords.Any(placedWord =>
                        {
                            double minDistance = (wordSize + placedWord.Size) * 0.4;

                            double distanceX = Math.Abs(placedWord.Left - leftPosition);
                            double distanceY = Math.Abs(placedWord.Top - topPosition);

                            return Math.Sqrt(Math.Pow(distanceX, 2) + Math.Pow(distanceY, 2)) < minDistance;
                        });

                        // Check if the word exceeds the container boundaries
                        bool exceedsBoundaries = leftPosition - wordSize / 2 < 0
                            || leftPosition + wordSize / 2 > 300
                            || topPosition - wordSize / 2 < 0
                            || topPosition + wordSize / 2 > 300;

                        collisionDetected = collisionDetected || exceedsBoundaries;

                        attempt++;
                    }
                    while (collisionDetected && attempt < maxAttempts);

                    if (!collisionDetected)
                    {
                        placedWords?.Add(new WordProperties
                        {
                            Value = cloudWord.Value,
                            Index = cloudWord.Index,
                            Size = wordSize,
                            Top = topPosition,
                            Left = leftPosition
                        });

                        <span class="word-cloud-item" style="font-size: @(wordSize)px; left: @(leftPosition)%; top: @(topPosition)%; z-index: @(cloudWord.Index + 1);">
                            @cloudWord.Value
                        </span>
                    }
                }
            }
        </div>
    </div>
</div>


@code {
    static readonly CultureInfo _ci = CultureInfo.CurrentCulture;
    readonly int _currentWeekNumber = _ci.Calendar.GetWeekOfYear(DateTime.Now, CalendarWeekRule.FirstFourDayWeek, DayOfWeek.Monday);
    public class SearchData
    {
        public string keyword { get; set; } = string.Empty;
        public int totalSearches { get; set; }
        public int weekNumber { get; set; }
    }
    private List<SearchData> _searchDatas = new();

    
     private Random random = new Random();
    
    List<string>? topSearches = new List<string>();
    List<WordProperties>? placedWords;
         

    public class WordProperties
    {
        public string? Value { get; set; }
        public int Index { get; set; }
        public int Size { get; set; }
        public int Top { get; set; }
        public int Left { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        var request = new HttpRequestMessage(HttpMethod.Get, "https://localhost:7194/Logger/SearchAction");
        var response = await HttpClient.SendAsync(request);
        if (response.IsSuccessStatusCode)
        {
            var responseContent = await response.Content.ReadAsStringAsync();
            var searchDatas = JsonSerializer.Deserialize<List<SearchData>>(responseContent);
            _searchDatas = searchDatas!;
        }
        
        _searchDatas = _searchDatas.Where(x => x.weekNumber == _currentWeekNumber).ToList();
        _searchDatas = _searchDatas.Take(7).ToList();
        
        foreach (var searchData in _searchDatas)
        {
            topSearches.Add(searchData.keyword);
        }

        random = new Random();
        topSearches = topSearches.OrderBy(x => random.Next()).ToList();
        placedWords = new List<WordProperties>();
    }
}


