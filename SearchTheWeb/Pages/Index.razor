@page "/index"
@using System
@using System.Collections.Generic
@using System.Linq

<div class="container">
    <div class="word-cloud">
        <div class="word-cloud-container">
            @foreach (var cloudWord in topSearches.Take(10).Select((value, index) => new { Value = value, Index = index }))
            {
                int baseFontSize = 14;
                int decreaseFactor = 4;
                int wordSize = baseFontSize + (10 - cloudWord.Index) * decreaseFactor;

                int maxAttempts = 100;
                int attempt = 0;
                bool collisionDetected;

                int leftPosition = 0;
                int topPosition = 0;

                do
                {
                    leftPosition = random.Next(0, 101); // Random left position between 0% and 100%
                    topPosition = random.Next(0, 101); // Random top position between 0% and 100%

                    collisionDetected = placedWords.Any(placedWord =>
                    {
                        double minDistance = (wordSize + placedWord.Size) * 0.4;

                        double distanceX = Math.Abs(placedWord.Left - leftPosition);
                        double distanceY = Math.Abs(placedWord.Top - topPosition);

                        return Math.Sqrt(Math.Pow(distanceX, 2) + Math.Pow(distanceY, 2)) < minDistance;
                    });

                    // Check if the word exceeds the container boundaries
                    bool exceedsBoundaries = leftPosition - wordSize / 2 < 0
                        || leftPosition + wordSize / 2 > 100
                        || topPosition - wordSize / 2 < 0
                        || topPosition + wordSize / 2 > 100;

                    collisionDetected = collisionDetected || exceedsBoundaries;

                    attempt++;
                }
                while (collisionDetected && attempt < maxAttempts);

                if (!collisionDetected)
                {
                    placedWords.Add(new WordProperties
                    {
                        Value = cloudWord.Value,
                        Index = cloudWord.Index,
                        Size = wordSize,
                        Top = topPosition,
                        Left = leftPosition
                    });

                    <span class="word-cloud-item" style="font-size: @(wordSize)px; left: @(leftPosition)%; top: @(topPosition)%; z-index: @(cloudWord.Index + 1);">
                        @cloudWord.Value
                    </span>
                }
            }
        </div>
    </div>
</div>

@code {
    Random random;
    List<string> topSearches;
    List<WordProperties> placedWords;

    public class WordProperties
    {
        public string Value { get; set; }
        public int Index { get; set; }
        public int Size { get; set; }
        public int Top { get; set; }
        public int Left { get; set; }
    }

    protected override void OnInitialized()
    {
        random = new Random();
        topSearches = new List<string>()
        {
            "Sci-Fi", "Horror", "RomCom", "Thriller", "Action", "Drama", "Tragic", "Comedy", "Artistic", "Tv-Show"
        };

        topSearches = topSearches.OrderBy(x => random.Next()).ToList();
        placedWords = new List<WordProperties>();
    }
}

<style>
    .word-cloud {
        display: flex;
        flex-wrap: wrap;
        justify-content: center;
        align-items: center;
        width: 80%;
        height: 80vh;
        margin: 0 auto;
        position: relative;
        text-align: center;
        border: 1px solid #000;
        padding: 20px;
        overflow: hidden;
    }

    .word-cloud span {
        position: absolute;
        transform: translate(-50%, -50%);
    }

    .word-cloud-container {
        position: relative;
        width: 100%;
        height: 100%;
    }

    .word-cloud-item {
        position: absolute;
    }
</style>
