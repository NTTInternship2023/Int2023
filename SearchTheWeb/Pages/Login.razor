@page "/login"

@layout LoginLayout
@inject IJSRuntime JsRuntime
@inject NavigationManager NavigationManager

@using SearchTheWeb.Controller
@using SearchTheWeb.Models

@namespace SearchTheWeb.Pages

<div class="container">
    <h1>LOGIN</h1>
    <div class="box">
        <div class="inside_box">
            <p class="warning"> 
                @warningMessage
            </p>
            <p>
                <MatTextField @bind-Value="@Username" Label="Username/Email" Outlined="true"></MatTextField>
            </p>
            <p>
                <MatTextField @bind-Value="@Password" Label="Password" Outlined="true" Type="password"></MatTextField>
            </p>
            <div class="button">
                <MatButton @onclick="() => setPopup(true)" Outlined="true" Style="align-self: flex-start; color: black">Register</MatButton>
                <MatButton Raised="true" Style="align-self: flex-end;" OnClick="@AssignUserLogin">Sign In</MatButton>
            </div>
        </div>
    </div>
</div>

@if (PopupActive)
{
    <div class="popup" style="display: flex">
        <div class="popup-content r_box">
            <h1>REGISTER</h1>
            <div>
                <p>
                    <MatTextField @bind-Value="@NewEmail" Label="Email" Outlined="true" style="width: 300px;"></MatTextField>
                </p>
                <p>
                    <MatTextField @bind-Value="@NewUsername" Label="Username" Outlined="true" style="width: 300px;"></MatTextField>
                </p>
                <p>
                    <MatTextField @bind-Value="@NewPassword" Label="Password" Outlined="true" Type="password"></MatTextField>
                </p>
                <p>
                    <MatTextField @bind-Value="@ConfirmNewPassword" Label="Confirm Password" Outlined="true" Type="password"></MatTextField>
                </p>
            </div>
            <div>
                <MatButton @onclick="() => setPopup(false)" Outlined="true" Style="align-self: flex-start; color: black">Cancel</MatButton>
                <MatButton @onclick="() => {setPopup(false); AssignUserRegister();}" Raised="true" Style="align-self: flex-start;">Sign Up</MatButton>
            </div>
        </div>
    </div>
}

@code
{
    string Username = string.Empty;
    string Password = string.Empty;

    string NewUsername = string.Empty;
    string NewEmail = string.Empty;
    string NewPassword = string.Empty;
    string ConfirmNewPassword = string.Empty;

    bool PopupActive = false;

    string warningMessage = string.Empty;

    LoginRegisterCheck verify = new();
    LoginUserDto userDto = new();
    RegisterUserDto regUserDto = new();

    void setPopup(bool state) => PopupActive = state;
    bool checkLogin()
    {
        if(verify.LoginCheck(userDto).Result.Item2 != null)
            warningMessage = verify.LoginCheck(userDto).Result.Item2!;

        return verify.LoginCheck(userDto).Result.Item1;
    }
    bool checkRegister()
    {
        if(verify.RegisterCheck(regUserDto).Result.Item2 != null)
            warningMessage = verify.RegisterCheck(regUserDto).Result.Item2!;

        return verify.RegisterCheck(regUserDto).Result.Item1;
    }
    void setWarning(bool state)
    {
        if (!state)
            warningMessage = string.Empty;
        else if(string.IsNullOrEmpty(warningMessage))
            warningMessage = "Unknown Error!";
    }
    private void AssignUserLogin()
    {
        userDto.Username = Username;
        userDto.Password = Password;

        //Confirm Login
        if (checkLogin())
        {
            setWarning(false);
            NavigationManager.NavigateTo("/search");
        }
        else
            setWarning(true);
    }
    private void AssignUserRegister()
    {
        regUserDto.Username = NewUsername;
        regUserDto.Email = NewEmail;
        regUserDto.Password = NewPassword;
        
        //Confirm Register
        if (checkRegister())
        {
            setWarning(false);
            setPopup(false);
        }
        else
            setWarning(true);
    }
}

