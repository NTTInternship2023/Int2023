@page "/login"

@layout LoginLayout

@inject HttpClient Http
@inject IJSRuntime JsRuntime
@inject NavigationManager NavigationManager

@using SearchTheWeb.Models
@using System.Text
@using System.Net.Http
@using System.Text.Json
@inject ILocalStorageService _localstorage;

@namespace SearchTheWeb.Pages

<div class="container">
    <h1>LOGIN</h1>
    <div class="box">
        <div class="inside_box">
            <p class="warning"> 
                @warningMessage
            </p>
            <p>
                <MatTextField @bind-Value="@Username" Label="Username/Email" Outlined="true"></MatTextField>
            </p>
            <p>
                <MatTextField @bind-Value="@Password" Label="Password" Outlined="true" Type="password"></MatTextField>
            </p>
            <div class="button">
                <MatButton @onclick="() => setPopup(true)" Outlined="true" Style="align-self: flex-start; color: black">Register</MatButton>
                <MatButton Raised="true" Style="align-self: flex-end;" OnClick="@HandleLogin">Sign In</MatButton>
            </div>
        </div>
    </div>
</div>

@if (PopupActive)
{
    <div class="popup" style="display: flex">
        <div class="popup-content r_box">
            <h1>REGISTER</h1>
            <div>
                <p>
                    <MatTextField @bind-Value="@NewEmail" Label="Email" Outlined="true" style="width: 300px;"></MatTextField>
                </p>
                <p>
                    <MatTextField @bind-Value="@NewUsername" Label="Username" Outlined="true" style="width: 300px;"></MatTextField>
                </p>
                <p>
                    <MatTextField @bind-Value="@NewPassword" Label="Password" Outlined="true" Type="password"></MatTextField>
                </p>
                <p>
                    <MatTextField @bind-Value="@ConfirmNewPassword" Label="Confirm Password" Outlined="true" Type="password"></MatTextField>
                </p>
            </div>
            <div>
                <MatButton @onclick="() => setPopup(false)" Outlined="true" Style="align-self: flex-start; color: black">Cancel</MatButton>
                <MatButton @onclick="() => {setPopup(false); AssignUserRegister();}" Raised="true" Style="align-self: flex-start;">Sign Up</MatButton>
            </div>
        </div>
    </div>
}

@code
{
    

    public class LoginStatus
    {
        public string message{ get; set;}="";
        public bool status { get; set; }=false;
    }


    string Username = string.Empty;
    string Password = string.Empty;

    string NewUsername = string.Empty;
    string NewEmail = string.Empty;
    string NewPassword = string.Empty;
    string ConfirmNewPassword = string.Empty;

    bool PopupActive = false;

    string warningMessage = string.Empty;

    private readonly HttpClient client;
    private List<LoginUserDto> user;
    LoginUserDto userDto = new();
    RegisterUserDto regUserDto = new();

    LoginStatus loginStatus = new();

    void setPopup(bool state) => PopupActive = state;
    void setWarning(bool state, string? message)
    {
        if (!state)
            warningMessage = string.Empty;
        else
            warningMessage = message;

        if(string.IsNullOrEmpty(warningMessage))
            warningMessage = "Unknown Error!";
    }
    private void AssignUserLogin()
    {
        userDto.Username = Username;
        userDto.Password = Password;
        Console.WriteLine(userDto.Username);
        Console.WriteLine(userDto.Password);
    }
    private void AssignUserRegister()
    {
        regUserDto.Username = NewUsername;
        regUserDto.Email = NewEmail;
        regUserDto.Password = NewPassword;
    }

    private async Task HandleLogin()
    {
        if(Username.Length<6){
            Console.WriteLine("Validare username <6");
            return;
        }

        HttpClient client=new HttpClient();
        var jsonContent= new{
            Username = Username,
            Password = Password
        };
        userDto.Username = Username;
        userDto.Password = Password;

        string jsonString = JsonSerializer.Serialize(jsonContent);
        Console.WriteLine(jsonString);
        HttpContent content=new StringContent(jsonString,Encoding.UTF8,"application/json");
        
        // de modificat endpoint sa trimita id si username daca check-ul de login a trecut.
        HttpResponseMessage response = await client.PostAsync("https://localhost:7194/api/User/login", content);
        
        var responseContent = await response.Content.ReadAsStringAsync();
        Console.WriteLine(responseContent);
        
        loginStatus=JsonSerializer.Deserialize<LoginStatus>(responseContent);

        
        
        Console.WriteLine(loginStatus.message);
        Console.WriteLine(loginStatus.status);
        Console.WriteLine(userDto.Username);
        Console.WriteLine(userDto.Password);
        //TODO:Redirect catre search page.
        
    }
}

