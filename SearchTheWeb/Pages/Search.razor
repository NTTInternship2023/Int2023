@page "/search"
@inject HttpClient Http
@inject NavigationManager NavigationManager
@using System.Text
@using System.Net.Http
@using System.Text.Json
@using Microsoft.Extensions.Http

<PageTitle>Search Hashtag</PageTitle>

<div class="user-info">
    @if (!string.IsNullOrEmpty(currentUser))
    {
        <p>Logged in as: <a class="user-link" @onclick="ShowUserPopup">@currentUser</a></p>
        @if (showUserPopup)
        {
            <div class="user-popup">
                <button class="popup-button" @onclick="CloseUserPopup">Log out</button>
                <button class="popup-button" @onclick="CloseUserPopup">Change Password</button>
            </div>
            <div class="popup-overlay" @onclick="CloseUserPopup"></div>
        }
    }
    else
    {
        <p>Not logged in.</p>
    }
</div>


<h1 class="search-heading">Search Hashtag</h1>

<p>This component demonstrates fetching data from the server.</p>

<form class="search-form">
    <div class="search-bar">
        <input type="text" class="form-control search-input" id="searchInput" @bind="@searchTerm" placeholder="Enter your search term" @oninput="GetSearchSuggestions"/>
        <datalist id="nameSuggestions">
            @foreach (var suggestion in lista)
            {
                <option value="@suggestion" />
            }
        </datalist>
        <br> -Start Year-
        <input type="text" class="form-control search-input" id="searchInput" @bind="@StartYear" placeholder="Start Year" />
         -End Year-
        <input type="text" class="form-control search-input" id="searchInput" @bind="@EndYear" placeholder="End Year" />
        <input type="text" class="form-control search-input" id="searchInput" @bind="@Sort" placeholder="Sorting incr/decr" />
        <input type="text" class="form-control search-input" id="searchInput" @bind="@TitleType" placeholder="Title type movie/tv series" />
        
    </div>
    <button type="button" class="btn btn-primary search-button" @onclick="PerformSearch">Search</button>
</form>


@if (!showUserPopup)  // Display hashtags only if user popup is not shown
{
    if (hashtags == null)
    {
        <p><em>Loading...</em></p>
    }
    else if (hashtags.Length == 0)
    {
        <p>No results found.</p>
    }
    else
    {
        <div class="hashtag-container">
            @foreach (var hashtag in hashtags)
            {
                <div class="hashtag-box">
                    <img src="@hashtag.PhotoUrl" alt="Hashtag Photo" class="hashtag-image" />
                    <h3>@hashtag.Name</h3>
                    <p>@hashtag.Summary</p>
                </div>
            }
        </div>
    }
}



@code {
    private SearchTerm[] allHashtags;
    private SearchTerm[] hashtags;
    private List<string> lista=new List<string>();
    private string searchTerm;
    private int StartYear;
    private string Sort;
    private string TitleType;
    private int EndYear;
    private string currentUser = "John";
    private bool showUserPopup = false;

    protected override async Task OnInitializedAsync()
    {
        // Initialize data
        allHashtags = await Http.GetFromJsonAsync<SearchTerm[]>("/sample-data/weather.json");
        hashtags = allHashtags;
         lista = new List<string>();
    }

    private async Task GetSearchSuggestions()
{ 
    try
    {
        var httpClient = new HttpClient();

        var jsonContent = new
        {
            hint = searchTerm
        };

        string jsonString = JsonSerializer.Serialize(jsonContent);
        HttpContent content = new StringContent(searchTerm);
        var response = await httpClient.PostAsync("https://localho.st:7194/Logger/Suggestion", content);

        var responseContent = await response.Content.ReadAsStringAsync();
        lista = JsonSerializer.Deserialize<List<string>>(responseContent);
    }
    catch (Exception ex)
    {
        // Afiseaza detaliile exceptiei in consola pentru debug
        Console.WriteLine(ex.ToString());
    }
}

    private void PerformSearch()
    {
        if (string.IsNullOrEmpty(searchTerm))
        {
            hashtags = allHashtags;
        }
        else
        {
            hashtags = allHashtags.Where(h => h.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)).ToArray();
        }
    }

    private void ShowUserPopup()
    {
        showUserPopup = true;
    }

    private void CloseUserPopup()
    {
        showUserPopup = false;
    }

    public class SearchTerm
    {
        public DateTime Date { get; set; }
        public string Name { get; set; }
        public string Summary { get; set; }
        public string PhotoUrl { get; set; }
    }
}

<style>
    /* Styles for other elements */

    .user-info {
        text-align: right;
        margin-top: 10px;
    }

    .search-heading {
        text-align: left;
    }

    /* User Popup Styles */
    .user-popup {
        position: fixed;
        top: 60px;
        right: 20px;
        background-color: #fff;
        border: 1px solid #ccc;
        border-radius: 4px;
        padding: 10px;
        z-index: 9999;
    }

    .popup-overlay {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: rgba(0, 0, 0, 0.5);
        z-index: 9998;
    }

    .popup-content {
        margin-bottom: 10px;
        cursor: pointer;
    }

    .user-link {
        cursor: pointer;
        text-decoration: underline;
    }
   
.search-form {
    display: flex;
    flex-direction: column;
    align-items: center;
    margin-top: 20px;
}

.search-bar {
    position: relative;
    width: 200px; /* Adjust the width as desired */
}

.search-input {
    width: 100%;
}

.hashtag-container {
    display: flex;
    flex-wrap: wrap;
    justify-content: center;
}

.hashtag-box {
    margin: 10px;
    padding: 10px;
    border: 1px solid #ccc;
    width: 300px;
    text-align: center;
}

.hashtag-image {
    width: 100%;
    height: auto;
    max-width: 200px; /* Adjust the maximum width as desired */
}
.popup-button {
    background-color: #007bff;
    color: #fff;
    border: none;
    padding: 8px 16px;
    margin-right: 10px;
    cursor: pointer;
}

.popup-button:hover {
    background-color: #0056b3;
}


</style>