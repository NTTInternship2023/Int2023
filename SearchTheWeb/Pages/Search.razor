@page "/search"
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject ILocalStorageService _localstorage;
@using System.Text
@using System.Net.Http
@using System.Text.Json
<!--@using Microsoft.Extensions.Http-->

<PageTitle>Search Hashtag</PageTitle>

<head>
    <link rel="stylesheet" href="css/search.css" />
</head>

<div class="user-info">
    @if (!string.IsNullOrEmpty(currentUser))
    {
        <p>Logged in as: <a class="user-link" @onclick="ShowUserPopup">@currentUser</a></p>
        @if (showUserPopup)
        {
            <div class="user-popup">
                <button class="popup-button" @onclick="CloseUserPopup">Log out</button>
                <button class="popup-button" @onclick="CloseUserPopup">Change Password</button>
            </div>
            <div class="popup-overlay" @onclick="CloseUserPopup"></div>
        }
    }
    else
    {
        <p>Not logged in.</p>
    }
</div>


<h1 class="search-heading">Search Hashtag</h1>

<p>This component demonstrates fetching data from the server.</p>

<form class="search-form">
    <div class="search-bar">
        <input type="text" list="txtsearch"  @bind="@searchTerm" placeholder="Enter your search term" @oninput="GetSearchSuggestions"/>
        <datalist id="txtsearch">
            @foreach(var item in lista){
                <option>@item</option>
            }
        </datalist>
        @* <select @bind="searchTerm">
            @foreach (var option in lista)
            {
                <option value="@option">@option</option>
            }
        </select> *@
        <br> -Start Year-
        <input type="text" class="form-control search-input" id="StartYear" @bind="@StartYear" placeholder="Start Year" />
         -End Year-
        <input type="text" class="form-control search-input" id="endYear" @bind="@EndYear" />
        -Sortare-
        <select class="form-control search-input" @bind="@Sort">
            <option>incr</option>
            <option>decr</option>
        </select>
        -Tipul-
       <select class="form-control search-input" @bind="@TitleType">
            <option>movie</option>
            <option>tvSeries</option>
        </select>
        
    </div>
    <button type="button" class="btn btn-primary search-button" @onclick="PerformSearch">Search</button>
</form>


@if (!showUserPopup)  // Display hashtags only if user popup is not shown
{
    if (movies == null)
    {
        <p><em>Loading...</em></p>
    }
    else if (movies.Count == 0)
    {
        <p>No results found.</p>
    }
    else
    {
        <div class="hashtag-container">
            @foreach (var movie in movies)
            {
                <div class="hashtag-box">
                    <img src="@movie.imageUrl" alt="Hashtag Photo" class="hashtag-image" />
                    <h3>@movie.title</h3>
                    <p>@movie.releaseYear      @movie.rating</p>
                </div>
            }
        </div>
    }
}

@code {
    private SearchTerm[]? allHashtags;
    private SearchTerm[]? hashtags;
    private List<string> lista=new List<string>();
    private List<Movie>? movies;
    private string? searchTerm;
    private int StartYear;
    private string? Sort;
    private string? TitleType;
    private int EndYear=2024;
    private string currentUser = "N/A";
    private bool showUserPopup = false;
    private int localId;

    protected override async Task OnInitializedAsync()
    {
        // Initialize data
        allHashtags = await Http.GetFromJsonAsync<SearchTerm[]>("/sample-data/weather.json");
        hashtags = allHashtags;
         lista = new List<string>();
        movies=new List<Movie>();
        localId = await _localstorage.GetItemAsync<int>("id");
        currentUser = await _localstorage.GetItemAsync<string>("username");
            Console.WriteLine(localId);
    }

    private async Task GetSearchSuggestions()
{ 
    try
    {
        var httpClient = new HttpClient();

        if (!string.IsNullOrEmpty(searchTerm))
{
    var request = new HttpRequestMessage(HttpMethod.Get, $"https://localhost:7194/Logger/Suggestions?hint={searchTerm}");
    var response = await httpClient.SendAsync(request);
    response.EnsureSuccessStatusCode();
    var result = await response.Content.ReadFromJsonAsync<List<string>>();
    lista = result ?? new List<string>();
    StateHasChanged();
}

        
    }
    catch (Exception ex)
    {
        // Afiseaza detaliile exceptiei in consola pentru debug
        Console.WriteLine(ex.ToString());
    }
}

    private async void PerformSearch()
    {
        HttpClient client=new HttpClient();
        var jsonContent= new{
            Title= searchTerm,
            StartYear=StartYear,
            sort=Sort,
            TitleType=TitleType,
            EndYear=EndYear,
            IdUser=localId //modificat sa foloseasca id user logat
        };

        string jsonString = JsonSerializer.Serialize(jsonContent);

        HttpContent content=new StringContent(jsonString,Encoding.UTF8,"application/json");
        
        
        HttpResponseMessage response = await client.PostAsync("https://localho.st:7194/api/User/Filter", content);

        var responseContent = await response.Content.ReadAsStringAsync();

        movies=JsonSerializer.Deserialize<List<Movie>>(responseContent);
        
        StateHasChanged();
    }

    private void ShowUserPopup()
    {
        showUserPopup = true;
    }

    private void CloseUserPopup()
    {
        showUserPopup = false;
    }

    public class SearchTerm
    {
        public DateTime Date { get; set; }
        public string? Name { get; set; }
        public string? Summary { get; set; }
        public string? PhotoUrl { get; set; }
    }

    public class Movie
    {
        public string? id{get; set;}
        public string? title{get;set;}
        public string? imageUrl { get; set; }
        public int releaseYear { get; set; }
        public double rating { get; set; }
    }
}

