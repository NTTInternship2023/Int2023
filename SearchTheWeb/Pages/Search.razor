@page "/search"
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject ILocalStorageService _localstorage
@using System.Text
@using System.Net.Http
@using System.Text.Json

<PageTitle>Search Hashtag</PageTitle>

<head>
    <link rel="stylesheet" href="css/search.css" />
</head>

<div class="user-info">
    @if (!string.IsNullOrEmpty(currentUser))
    {
        <p>Logged in as: <a class="user-link" @onclick="ShowUserPopup">@currentUser</a></p>
        @if (showUserPopup)
        {
            <div class="user-popup">
                <button class="popup-button" @onclick="LogOut">Log out</button>
                <button class="popup-button" @onclick="ChangePassword">Change Password</button>
            </div>
            <div class="popup-overlay" @onclick="CloseUserPopup"></div>
        }
    }
    else
    {
        <p>Not logged in.</p>
    }
</div>


<h1 class="search-heading">Search Title</h1>

<form class="search-form">
    <div class="search-bar">
        <input id="searchBox" type="text" list="txtsearch" @oninput="@UpdateSearchTermString" placeholder="Enter your search term"/>
        <datalist id="txtsearch">
            @if (lista != null)
            {
                foreach(var item in lista){
                    <option>@item</option>
                }    
            }
            
        </datalist>
        <br> -Start Year-
        <input type="text" class="form-control search-input" id="StartYear" @bind="@StartYear" placeholder="Start Year" />
        -End Year-
        <input type="text" class="form-control search-input" id="endYear" @bind="@EndYear" />
        -Sortare-
        <select class="form-control search-input" @bind="@Sort">
            <option>incr</option>
            <option>decr</option>
        </select>
        -Tipul-
        <select class="form-control search-input" @bind="@TitleType">
            <option value="movie,tvSeries">All</option>
            <option value="movie">movie</option>
            <option value="tvSeries">tvSeries</option>
        </select>
    </div>
    <div class="nav-item px-3">
        <div class="form-group">
            <label class="nav-link language-label" for="languageSelect">Select Language:</label>
            <select @bind="@currentLanguage" class="form-control" id="languageSelect">
                @foreach (var language in languages)
                {   
                    <option value="@language.Key" >@language.Value </option>
                }
            </select>
        </div>
    </div>
    <br/>   
    <button type="button" class="btn btn-primary search-button" @onclick="PerformSearch">Search</button>
</form>


@if (!showUserPopup)  // Display hashtags only if user popup is not shown
{
    if (movies == null)
    {
        <p><em>Loading...</em></p>
    }
    else if (movies.Count == 0)
    {
        <p>No results found.</p>
    }
    else
    {
        <div class="hashtag-container">
            @foreach (var movie in movies)
            {
                
                <div class="hashtag-box">
                    <div class="image-container">
                        <div class="container" >
                            <img class="image" src="/images/icons8-ribbon-nomination-100.png" alt="Imagine">
                            <span class="number_nomination">@movie.nomination</span>
                            <img class="image" src="/images/icons8-ribbon-award-100.png" alt="Imagine">
                            <span class="number_award">@movie.award</span>
                        </div>
                        <img src="@movie.imageUrl" alt="Hashtag Photo" class="hashtag-image" />
                        
                    </div>
                    <div class="movie-info">
                        <h3>@movie.regionalTitles[currentLanguage]</h3>
                        <p>Release year: @movie.releaseYear</p>
                        <p>  <div class="stars"><span class="tooltiptext">@movie.numVotes votes</span><div class="percent" style="width:@ReturnStarRating(movie.rating);"></div></div></p>
                        </div>
                    </div>
            }
        </div>
    }
}

@code {
    private void UpdateSearchTermString(ChangeEventArgs args)
    {
        SearchTermString = args.Value.ToString();
    }
    private SearchTerm[]? allHashtags;
    private SearchTerm[]? hashtags;
    private List<string>? lista = new List<string>();
    private List<Movie>? movies;
    private string? searchTerm = string.Empty;
    private string? SearchTermString{
        get {
        return searchTerm;
    }
        set {
        if(value!=null){
           Task.Run( async() => await GetSearchSuggestions(value));
            searchTerm=value;
        }
    }}
    
    
    
    private string currentLanguage = "US";
    private Dictionary<string, string> languages = new Dictionary<string, string>()
    {
        { "US", "English" },
        { "RO", "Romana" },
        { "DE", "Deutsch" },
        { "ES", "Espanol" }
    };
    
    private Dictionary<string, string> languageIcons = new Dictionary<string, string>()
    {
        { "US", "images/united-states.png" },
        { "RO", "images/romania.png" },
        { "DE", "images/germany.png" },
        { "ES", "images/spain.png" }
    };
    
    
    
    private int StartYear;
    private string? Sort = "incr";
    private string? TitleType;
    private int EndYear=2024;
    private string currentUser = "N/A";
    private bool showUserPopup = false;
    private int? localId;// for testing purposes

    protected override async Task OnInitializedAsync()
    {
        // Initialize data
        allHashtags = await Http.GetFromJsonAsync<SearchTerm[]>("/sample-data/weather.json");
        hashtags = allHashtags;
        lista = new List<string>();
        movies=new List<Movie>();
        localId = await _localstorage.GetItemAsync<int?>("id")??20;
        currentUser = await _localstorage.GetItemAsync<string>("username");
        Console.WriteLine(localId);
    }
    private void ChangePassword(){
        if (!string.IsNullOrEmpty(currentUser))
            NavigationManager.NavigateTo("../change_password", forceLoad:true );
    }
    private async Task GetSearchSuggestions(string? searchTerm = null)
    { 
        try
        {
            if (!string.IsNullOrEmpty(searchTerm))
            {
            using(var httpClient = new HttpClient())
            {
                var request = new HttpRequestMessage(HttpMethod.Get, $"https://localhost:7194/Logger/Suggestions?hint={searchTerm}");
                var response = await httpClient.SendAsync(request);
                response.EnsureSuccessStatusCode();
                var result = await response.Content.ReadFromJsonAsync<List<string>>();
                
                if(result!=null){
                    if(result.Count>10){
                        result=result.GetRange(0,10);
                    }
                }
                lista = result ?? null;
                StateHasChanged();
            }
        }


        }
        catch (Exception ex)
        {
            // Afiseaza detaliile exceptiei in consola pentru debug
            Console.WriteLine(ex.ToString());
        }
    }

    private async void PerformSearch()
    {
        HttpClient client=new HttpClient();
        var jsonContent= new{
            Title= searchTerm,
            StartYear=StartYear,
            sort=Sort,
            TitleType=TitleType,
            EndYear=EndYear,
            IdUser=localId //modificat sa foloseasca id user logat
        };

        string jsonString = JsonSerializer.Serialize(jsonContent);

        HttpContent content=new StringContent(jsonString,Encoding.UTF8,"application/json");


        HttpResponseMessage response = await client.PostAsync("https://localho.st:7194/api/User/Filter", content);
        
        if(response.IsSuccessStatusCode){
            var responseContent = await response.Content.ReadAsStringAsync();

            movies=JsonSerializer.Deserialize<List<Movie>>(responseContent);
            
            //Set movies regional titles in US to title
            foreach(var movie in movies){
                movie.regionalTitles["US"]=movie.title;
            }
            
        foreach(var movie in movies){
            try{
             var newRequest = new HttpRequestMessage(HttpMethod.Get, $"https://localhost:7194/api/User/awards/{movie.id}");
            var newResponse = await client.SendAsync(newRequest);
            
            if(newResponse.IsSuccessStatusCode){
            var newResponseContent = await newResponse.Content.ReadAsStringAsync();
            Nom rez=JsonSerializer.Deserialize<Nom>(newResponseContent);

            movie.nomination=rez.numberOfNominations;
            movie.award=rez.numberOfWins;
            }
            }catch(Exception ex){
                Console.WriteLine(ex.ToString());
            }
        }
            StateHasChanged();
        }
        else{
            Console.WriteLine("Error");
        }
    }

    private async Task LogOut()
    {
        await _localstorage.RemoveItemAsync("id");
        await _localstorage.RemoveItemAsync("username");
        NavigationManager.NavigateTo("../login", forceLoad:true);
    }
    private void ShowUserPopup()
    {
        showUserPopup = true;
    }

    private void CloseUserPopup()
    {
        showUserPopup = false;
    }
    
    public string ReturnStarRating(double? rating)

    {
        string starRating = "0%";
        if(rating!=null)
        {
            rating *= 10;
            starRating = rating.ToString() + "%";
        }
       
        return starRating;

    }

    public class Movie
    {
        public string? id{get; set;}
        public string? title{get;set;}
        public string? imageUrl { get; set; }
        public int releaseYear { get; set; }
        public double rating { get; set; }
        public int? nomination=0;
        public int? award=0;
        public int numVotes { get; set; }
        public Dictionary<string, string?>? regionalTitles { get; set; }
    }
    public class SearchTerm
    {
        public DateTime Date { get; set; }
        public string? Name { get; set; }
        public string? Summary { get; set; }
        public string? PhotoUrl { get; set; }
    }
    public class Nom
    {
        public int numberOfNominations {get; set;}
        public int numberOfWins {get; set;}
    }

}

