@page "/change_password"

@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject ILocalStorageService _localstorage;

@using System.Text
@using System.Net.Http
@using System.Text.Json

<head>
    <link rel="stylesheet" href="css/change_password.css" />
</head>

<PageTitle>Change Password</PageTitle>

<h1>Change Password</h1>

<div class="change-password-form">
    <div class="form-group">
        <p>
            <MatTextField @bind-Value="@oldPassword" Label="Password" Outlined="true"></MatTextField>
        </p>
    </div>
    <div class="form-group">
        <p>
            <MatTextField @bind-Value="@newPassword" Label="New Password" Outlined="true"></MatTextField>
        </p>
    </div>
    <div class="form-group">
        <p>
            <MatTextField @bind-Value="@confirmPassword" Label="Confirm New Password" Outlined="true"></MatTextField>
        </p>
    </div>
    <button type="button" class="btn btn-primary" @onclick="ChangePassword">Confirm</button>
</div>

@if (warningState)
{
    <div class="popup warning_box" style="display: flex">
        <div class="popup-content">
            <h1>@warningMessage</h1>
            <div>
                <MatButton @onclick="() => setWarning(false, string.Empty)" Outlined="true" Style="align-self: flex-start; color: black">Back</MatButton>
            </div>
        </div>
    </div>
}

@code {
    string Username = string.Empty;

    string oldPassword = string.Empty;
    string newPassword = string.Empty;
    string confirmPassword = string.Empty;

    bool warningState;
    string warningMessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        Username = await _localstorage.GetItemAsync<string>("username");
        if (string.IsNullOrEmpty(Username))
            NavigationManager.NavigateTo("../login");
    }    
    private async Task ChangePassword()
    {
        if (string.IsNullOrEmpty(oldPassword) || string.IsNullOrEmpty(newPassword)){
            setWarning(true,"Password field required");
            return;
        }
        if (newPassword!=confirmPassword){
            setWarning(true,"Passwords do not match");
            return;
        }

        HttpClient client=new HttpClient();
        var jsonContent= new{
            Username = Username,
            Password = oldPassword,
            NewPassword = newPassword
        };

        string jsonString = JsonSerializer.Serialize(jsonContent);
        HttpContent content=new StringContent(jsonString,Encoding.UTF8,"application/json");
        HttpResponseMessage response = await client.PostAsync("https://localhost:7194/api/User/changepassword", content);

        var responseContent = await response.Content.ReadAsStringAsync();

        if(!response.IsSuccessStatusCode)
        {
            setWarning(true, responseContent);
            return;
        } else
        {
            setWarning(true, "Password changed succesfully");
            oldPassword = string.Empty;
            newPassword = string.Empty;
            confirmPassword = string.Empty;
            StateHasChanged();
        }
    }
    void setWarning(bool state, string? message)
    {
        warningState = state;
        if (!state)
            warningMessage = string.Empty;
        else
            warningMessage = message!;

        if(string.IsNullOrEmpty(warningMessage) && state)
            warningMessage = "Unknown Error!";
    }
}
