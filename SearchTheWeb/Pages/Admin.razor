@page "/admin"

@using System.Text
@using System.Net.Http
@using System.Text.Json

@inject HttpClient Http

<PageTitle>Admin</PageTitle>

<head>
    <link rel="stylesheet" href="css/admin.css" />
</head>

<h1>Admin Page</h1>

<div class="graph">
    <WeeklySearchGraph />
</div>

<div class="user-info">
    @if (!string.IsNullOrEmpty(currentUser))
    {
        <p>Logged in as: <a class="user-link" @onclick="ToggleUserPopup">@currentUser</a></p>
        <div class="user-popup" style="display: @(showUserPopup ? "block" : "none")">
            <button class="popup-button">Log out</button>
            <button class="popup-button">Change Password</button>
        </div>
        <div class="popup-overlay" style="display: @(showUserPopup ? "block" : "none")" @onclick="CloseUserPopup"></div>
    }
    else
    {
        <p>Not logged in.</p>
    }
</div>

<form class="search-form">
    <div class="search-bar">
        <input type="text" class="form-control" id="searchInput" list="nameSuggestions" @bind="@searchTerm" placeholder="Enter your search term" />
        @if (string.IsNullOrEmpty(searchTerm))
        {
            <span class="search-icon">
                <i class="bi bi-search"></i>
            </span>
        }
    </div>
    <button type="button" class="btn btn-primary search-button" @onclick="PerformSearch">Search</button>
</form>

<div class="admin-actions">
    @* <button type="button" class="btn btn-success add-button" disabled @onclick="OpenAddHashtagPopup">Add Hashtag</button> *@
    <button type="button" class="btn btn-primary view-activity-button" @onclick="ToggleUserActivity">View User Activity</button>
    @* <button type="button" class="btn btn-primary show-hide-button" disabled @onclick="ToggleShowHidePosts">Show/Hide Posts</button> *@
</div>


@if (showUserActivity)
{
    <div class="user-activity">
        <h2>User Activity</h2>
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>id</th>
                    <th>IdUser</th>
                    <th>Date</th>
                    <th>Action</th>
                    <th>Details</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var user in users)
                {
                    <tr>
                        <td>@user.id</td>
                        <td>@user.IdUser</td>
                        <td>@user.Date.ToShortDateString()</td>
                        <td>@user.Action</td>
                        <td>@user.ActionDetail</td>
                    </tr>
                   
                }
            </tbody>
        </table>
    </div>
}


@code {
    private SearchTerm[]? allHashtags;
    private SearchTerm[]? hashtags;
    private string? searchTerm;
    private string currentUser = "Admin";
    private SearchTerm? newHashtag;
    private bool showAddHashtagPopup = false;
    private bool showUserActivity = false;
    private List<SearchLog> users=new List<SearchLog>();
    private bool showPosts = true;
    private bool showUserPopup = false;

    private void ToggleUserPopup()
    {
        showUserPopup = !showUserPopup;
    }

    private void CloseUserPopup()
    {
        showUserPopup = false;
    }

    protected override async Task OnInitializedAsync()
    {
        allHashtags = await Http.GetFromJsonAsync<SearchTerm[]>("sample-data/weather.json");
        hashtags = allHashtags;
        newHashtag = new SearchTerm();

        // Dummy data for user activity
        var httpClient = new HttpClient();
        var request=new HttpRequestMessage(HttpMethod.Get, "https://localhost:7194/Logger/GetAll");

        var response=await httpClient.SendAsync(request);
        response.EnsureSuccessStatusCode();
        var save=await response.Content.ReadFromJsonAsync<List<SearchLog>>();
if (save != null)
{
    foreach (var ceva in save)
    {
        SearchLog searchLog = new SearchLog();

        if (ceva != null)
        {
            searchLog.id = ceva.id; // Assuming id is of type int
            searchLog.IdUser = ceva.IdUser; // Assuming IdUser is of type int
            searchLog.Date = ceva.Date != null ? ceva.Date : DateTime.MinValue; // Assuming Date is of type DateTime
            searchLog.Action = ceva.Action;
            searchLog.ActionDetail = ceva.ActionDetail;
        }

        users.Add(searchLog);
    }
}





        
    }

 private IEnumerable<string?> GetAvailableNames()
{
    if (allHashtags != null)
    {
        return allHashtags.Select(h => h.Name).Distinct();
    }

    return Enumerable.Empty<string?>();
}



private void PerformSearch()
{
    if (string.IsNullOrEmpty(searchTerm))
    {
        hashtags = allHashtags;
    }
    else
    {
        if (allHashtags != null)
        {
            hashtags = allHashtags.Where(h => h != null && h.Name != null && h.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)).ToArray();
        }
        else
        {
            hashtags = new SearchTerm[0]; // or an appropriate default value
        }
    }
}





    private void OpenAddHashtagPopup()
    {
        showAddHashtagPopup = true;
    }

    private void CloseAddHashtagPopup()
    {
        showAddHashtagPopup = false;
    }

    private void ToggleUserActivity()
    {
        showUserActivity = !showUserActivity;
    }

    private void ToggleShowHidePosts()
    {
        showPosts = !showPosts;
    }

    public class SearchTerm
    {
        public DateTime Date { get; set; }
        public string? Name { get; set; }
        public string? Summary { get; set; }
        public string? PhotoUrl { get; set; }
    }

    public class SearchLog
    {
        public int id {get; set;}
        public int IdUser {get; set;}
        public DateTime Date { get; set; }
        public string? Action { get; set; }
        public string? ActionDetail { get; set; }
        @* public bool ShowDetails { get; set; } = false; *@
    }
}


