@page "/admin"

@using System.Text
@using System.Net.Http
@using System.Text.Json

@inject HttpClient Http

<PageTitle>Admin</PageTitle>

<head>
    <link rel="stylesheet" href="css/admin.css" />
</head>

<h1>Admin Page</h1>

<div class="user-info">
    @if (!string.IsNullOrEmpty(currentUser))
    {
        <p>Logged in as: <a class="user-link" @onclick="ToggleUserPopup">@currentUser</a></p>
        <div class="user-popup" style="display: @(showUserPopup ? "block" : "none")">
            <button class="popup-button">Log out</button>
            <button class="popup-button">Change Password</button>
        </div>
        <div class="popup-overlay" style="display: @(showUserPopup ? "block" : "none")" @onclick="CloseUserPopup"></div>
    }
    else
    {
        <p>Not logged in.</p>
    }
</div>

<form class="search-form">
    <div class="search-bar">
        <input type="text" class="form-control" id="searchInput" list="nameSuggestions" @oninput="@UpdateSearchTermString" placeholder="Search in logs" />
        @if (string.IsNullOrEmpty(SearchTerm))
        {
            <span class="search-icon">
                <i class="bi bi-search"></i>
            </span>
        }
    </div>
    @* <button type="button" class="btn btn-primary search-button" @onclick="PerformSearch">Search</button> *@
</form>

<div class="admin-actions">
    @* <button type="button" class="btn btn-success add-button" disabled @onclick="OpenAddHashtagPopup">Add Hashtag</button> *@
    <button type="button" class="btn btn-primary view-activity-button" @onclick="ToggleUserActivity">View Graph</button>
    @* <button type="button" class="btn btn-primary show-hide-button" disabled @onclick="ToggleShowHidePosts">Show/Hide Posts</button> *@
</div>


@if (showUserActivity)
{
    <div class="graph">
        <WeeklySearchGraph />
    </div>
}
    <div class="user-activity">
        <h2>User Activity</h2>
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>id</th>
                    <th>IdUser</th>
                    <th>Date</th>
                    <th>Action</th>
                    <th>Details</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var user in logs)
                {
                    <tr>
                        <td>@user.id</td>
                        <td>@user.IdUser</td>
                        <td>@user.Date.ToShortDateString()</td>
                        <td>@user.Action</td>
                        <td>@user.ActionDetail</td>
                    </tr>
                   
                }
            </tbody>
        </table>
    </div>

@code {
    private void UpdateSearchTermString(ChangeEventArgs e)
    {
        if(e.Value!= null)
        SearchTerm = e.Value.ToString();
    }
    private string? searchTerm;
    private string? SearchTerm{
        get{
            return searchTerm;
            }
        set{
            searchTerm=value;
            if(value!=null)
            PerformSearch(value);
        }
    }
    private string currentUser = "Admin";
    private bool showAddHashtagPopup = false;
    private bool showUserActivity = false;
    private List<SearchLog> users=new List<SearchLog>();
    private bool showPosts = true;
    private bool showUserPopup = false;

    private void ToggleUserPopup()
    {
        showUserPopup = !showUserPopup;
    }

    private void CloseUserPopup()
    {
        showUserPopup = false;
    }

    protected override async Task OnInitializedAsync()
    {
        // Dummy data for user activity
        var httpClient = new HttpClient();
        var request=new HttpRequestMessage(HttpMethod.Get, "https://localhost:7194/Logger/GetAll");

        var response=await httpClient.SendAsync(request);
        response.EnsureSuccessStatusCode();
        var save=await response.Content.ReadFromJsonAsync<List<SearchLog>>();
        if (save != null)
        {
            foreach (var ceva in save)
            {
                SearchLog searchLog = new SearchLog();

                if (ceva != null)
                {
                    searchLog.id = ceva.id; // Assuming id is of type int
                    searchLog.IdUser = ceva.IdUser; // Assuming IdUser is of type int
                    searchLog.Date = ceva.Date != null ? ceva.Date : DateTime.MinValue; // Assuming Date is of type DateTime
                    searchLog.Action = ceva.Action;
                    searchLog.ActionDetail = ceva.ActionDetail;
                }

                users.Add(searchLog);
            }
            users.Sort((a, b) => b.Date.CompareTo(a.Date));
            logs = users;
        }
    }
    private void PerformSearch(string value)
    {
        
        value = value?.Trim() ?? ""; // Use null-coalescing operator to provide an empty string if 'value' is null

// Assuming 'users' is a List<User> or IEnumerable<User> and 'ActionDetail' property is of type string
logs = users
    .Where(x => x.ActionDetail?.ToLowerInvariant().Contains(value.ToLowerInvariant()) == true)
    .ToList();

        StateHasChanged();
    }
    private List<SearchLog> logs = new List<SearchLog>();
    private void OpenAddHashtagPopup()
    {
        showAddHashtagPopup = true;
    }

    private void CloseAddHashtagPopup()
    {
        showAddHashtagPopup = false;
    }

    private void ToggleUserActivity()
    {
        showUserActivity = !showUserActivity;
    }

    private void ToggleShowHidePosts()
    {
        showPosts = !showPosts;
    }

    public class SearchLog
    {
        public int id {get; set;}
        public int IdUser {get; set;}
        public DateTime Date { get; set; }
        public string? Action { get; set; }
        public string? ActionDetail { get; set; }
        @* public bool ShowDetails { get; set; } = false; *@
    }
}


